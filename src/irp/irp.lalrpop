use std::str::FromStr;
use crate::irp::ast::*;

grammar;

GeneralItem: GeneralItem = {
    "msb" => GeneralItem::OrderMsb,
    "lsb" => GeneralItem::OrderLsb,
    <n:float_number> "p" => GeneralItem::Unit(n, Unit::Pulses),
    <n:float_number> => GeneralItem::Unit(n, Unit::Microseconds),
    <n:float_number> "k" => GeneralItem::Frequency(n),
    <n:float_number> "%" => GeneralItem::DutyCycle(n),    
}

number: i64 = {
    r"\d+" => i64::from_str(<>).unwrap(),
}

float_number: f64 = {
    r"\d+"  => f64::from_str(<>).unwrap(),
    r"\d+\.\d+" => f64::from_str(<>).unwrap(),
}

duration: Duration = {
    <n:float_number> "m" => Duration::Flash(n, Unit::Milliseconds),
    <n:float_number> "u" => Duration::Flash(n, Unit::Microseconds),
    <n:float_number> "p" => Duration::Flash(n, Unit::Pulses),
    "-" <n:float_number> "m" => Duration::Gap(n, Unit::Milliseconds),
    "-" <n:float_number> "u" => Duration::Gap(n, Unit::Microseconds),
    "-" <n:float_number> "p" => Duration::Gap(n, Unit::Pulses),
    "^" <n:float_number> "m" => Duration::Extent(n, Unit::Milliseconds),
    "^" <n:float_number> "u" => Duration::Extent(n, Unit::Microseconds),
    "^" <n:float_number> "p" => Duration::Extent(n, Unit::Pulses),
}

RepeatMarker: RepeatMarker = {
    "*" => RepeatMarker::Any,
    "+" => RepeatMarker::OneOrMore,
    <i:number> => RepeatMarker::Count(i),
    <i:number> "+" => RepeatMarker::CountOrMore(i),
}

IrStream: IrStream = {
    "(" <b:BareIrStream> ")" <r:RepeatMarker?> => IrStream{ stream: b, repeat: r},
}

BareIrStream: Vec<Duration> = {
    CommaList<duration> => <>,
}

bit_spec: Vec<Vec<Duration>> = {
    "<" <b:PipeList<BareIrStream>> ">" => b,
}

pub protocol: Irp = {
    "{" <v:CommaList<GeneralItem>> "}" <b:bit_spec> => Irp { general_spec: v, bit_spec: b },
}

CommaList<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

PipeList<T>: Vec<T> = {
    <v:(<T> "|")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};
